<html>
<head>
<!--見出しと同じものをタイトルにします-->
<title>入力転送時のバッファ使用方法について</title>
<!--META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=shift-jis"-->
<link rel=StyleSheet href=default.css>
</head>
<body>

<!---------------------------------------------------------------------------------
ここにコンテンツを記載
-------------------------------------------------------------------------------->

<!--ページが長くなったときにトップへ戻るジャンプを付ける場合のリンク名です-->
<a name=TOPIC_TOP>
<!-===============================================================================-->
<!-見出し-->
<!-===============================================================================-->
<h1>入力転送時のバッファ使用方法について</h1>
<p>
　ここでは、入力転送（サンプリング）を行なう上での代表的なパターンにおけるバッファと関数の使用方法について説明します。<br>
<br>
<br>
<h2>■パターン１：有限データ数、データをサンプリング後に取得</h2>
<p>
　1回転送を行ない、データをサンプリング終了後に取得する場合です。<br>
<pre><img src="syori.png" border="0" alt="syori.png(440 byte)" width="223" height="43">
                      処理</pre>

この場合、バッファサイズは欲しいデータ数のサイズ以上用意する必要があります。<br>
バッファの繰り返し指定は、DIODM_WRITE_ONCEを指定します。<br>
データ入力個数が決まっている場合には、ストップ条件をDIODM_STOP_NUMに指定して、<br>
DioDmSetStopNum関数で指定個数で転送を完了するようにしてください。<br>
<br>
転送を開始した後は、完了メッセージを待つか、<br>
またはステータス取得関数でステータスビットDIODM_STATUS_BMSTOPが立つまで、<br>
nanosleepなどでウェイトを入れながらループで待ちます。<br>
<br>
<br>
<h2>■パターン２：有限データ数、データをサンプリングしながら取得</h2>
<br>
　1回転送を行ない、データをサンプリング中に取得して、使用する場合です。<br>
<pre><img src="syori.png" border="0" alt="syori.png(440 byte)" width="223" height="43">
  処理      処理      処理</pre>

この場合、バッファサイズは欲しいデータ数のサイズ以上用意する必要があります。<br>
バッファの繰り返し指定は、DIODM_WRITE_ONCEを指定します。<br>
データ入力個数が決まっている場合には、ストップ条件をDIODM_STOP_NUMに指定して、<br>
DioDmSetStopNum関数で指定個数で転送を完了するようにしてください。<br>
<br>
転送中は、転送個数取得関数（DioDmGetCount）でデータの入っている<br>
位置を確かめながら、処理を行ないます。<br>
<br>
途中でステータス関数でのチェックを行なって、エラーなどで終了していないかを<br>
確認しながら処理を行なってください。<br>
システムに負荷を掛けないためには、ループ中でnanosleepなどでウェイトを入れてください。<br>
<br>
<br>
<h2>■パターン３：無限データ数、全てのデータを取得</h2>
<br>
　無限転送を行ない、一定個数データを取得したら、ファイルにデータを格納するなどの<br>
処理を行なう場合です。<br>
<pre><img src="syori.png" border="0" alt="syori.png(440 byte)" width="223" height="43">
  処理      処理      処理</pre>

転送個数の確認は、指定個数転送完了メッセージを使用するか、システムタイマ等で<br>
転送個数取得関数を使用して行ないます。<br>
アプリケーションはリードポインタからライトポインタまで処理の処理をシステムタイマまたは<br>
イベントメッセージにより周期的に行ないます。<br>
<br>
この場合注意しなければならないのは、どこまでデータを処理したのかを示すリードポインタと、<br>
バッファのどこまでデータが書かれているかを示すライトポインタをユーザープログラムで<br>
管理しなければならない点です。<br>
<br>
リードポインタ／ライトポインタは、バッファサイズまで転送すると、折り返して0に戻るカウンタです。<br>
ライトポインタは、(DioDmGetWritePointerUserBuf)を使用して求めます。<br>
リードポインタは、前回データ処理時のライトポインタです。<br>
<br>
<br>
<h2>■パターン４：無限データ数、ライトポインタを取得して、任意の箇所から任意のデータ数を取得</h2>
<br>
　無限転送を行ない、ある任意の条件が成立したら任意の箇所から任意のデータ数を取得するという場合です。<br>
この場合も、リードポインタとライトポインタの管理が必要になります。
パターン3を参考にしてください。
<br>
<p>
<!---------------------------------------------------------------------------------
コンテンツここまで
-------------------------------------------------------------------------------->
</BODY>
</HTML>
